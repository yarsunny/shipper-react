import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchDrivers } from "./driverAPI";

const initialState = {
  currentPage: 0,
  drivers: [],
  query: undefined,
  status: "init",
};

export const loadDrivers = createAsyncThunk("driver/loadDrivers", async () => {
  const response = await fetchDrivers();
  return response.json();
});

export const driverSlice = createSlice({
  name: "driver",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    search: (state, action) => {
      state.currentPage = 0;
      state.query = action.payload;
    },
    next: (state) => {
      state.currentPage += 1;
    },
    previous: (state) => {
      state.currentPage -= 1;
    },
  },

  // Actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadDrivers.pending, (state) => {
        state.status = "loading";
      })
      .addCase(loadDrivers.fulfilled, (state, action) => {
        state.status = "idle";
        state.drivers = action.payload.results;
      });
  },
});

export const { next, previous, search } = driverSlice.actions;
export const selectDriversData = (state) => {
  const driversPerPage = 5;
  const { status, currentPage, drivers, query } = state.driver;
  let filteredDrivers = [...drivers];
  if (query?.trim()) {
    filteredDrivers = filteredDrivers.filter((driver) =>
      driver.name.first.includes(query?.trim())
    );
  }
  const totalPages = Math.ceil(
    filteredDrivers.length / driversPerPage
  );
  const startingDriverIndex = currentPage * driversPerPage;
  const endingDriverIndex =
    currentPage === totalPages - 1 &&
    startingDriverIndex + driversPerPage < filteredDrivers.length
      ? filteredDrivers.length
      : startingDriverIndex + driversPerPage;

  const pageDrivers = filteredDrivers.slice(
    startingDriverIndex,
    endingDriverIndex
  );

  return {
    status,
    currentPage,
    pageDrivers,
    totalPages,
    query,
  };
};
export default driverSlice.reducer;
